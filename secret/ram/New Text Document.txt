module ram_256_258_260(
    input clk,
    input [7:0] data_in,
    input wr,
    input rd,
    input [2:0] add,
    output [7:0] data_out
    );
    reg [7:0] ram [0:7];
    always @(posedge clk)
    begin
        if(wr)
        ram[add]<=data_in;
    end
    assign data_out=rd?ram[add]:8'bzzzzzzzz;
endmodule



tb

module tb_256_258_260;
reg clk;
reg wr;
reg rd;
reg [7:0] data_in;
reg [2:0] add;
wire [7:0] data_out;
    
ram_256_258_260 uut(.clk(clk),
                    .wr(wr),
                    .rd(rd),
                    .add(add),
                    .data_in(data_in),
                    .data_out(data_out));
initial begin
    clk=1;
    forever #10 clk=~clk;
end

initial begin
    rd=1'b1; wr=1'b1; add=2'b00; data_in=8'b00000101; #20;
    rd=1'b1; wr=1'b0; add=2'b00; #20;
    
    rd=0; wr=1; add=2'b01; data_in=8'b00000100; #20;
    rd=1; wr=0; add=2'b01; #20;
    
    rd=0; wr=1; add=2'b10; data_in=2'b00000110; #20;
    rd=1; wr=0; add=2'b10; #20;
    
    rd=0; wr=1; add=2'b11; data_in=8'b00001100; #20;
    rd=1; wr=0; add=2'b11; #20;
end
endmodule